use ff::PrimeField;
use libspartan::{Assignment, Instance, NIZKGens, NIZK};
use merlin::Transcript;
use prover::wasm::{load_witness_from_bin_reader, F1};
use std::fs;

#[test]
fn test_prove() {
    let circuit_bin = fs::read("tests/test_circuit/test_circuit.circuit").unwrap();
    let vars = fs::read("tests/test_circuit/witness.wtns").unwrap();

    let witness = load_witness_from_bin_reader::<F1, _>(vars.as_slice()).unwrap();
    let witness_bytes = witness
        .iter()
        .map(|w| w.to_repr())
        .collect::<Vec<[u8; 32]>>();

    let public_inputs = [F1::from(1u64)]
        .iter()
        .map(|w| w.to_repr())
        .collect::<Vec<[u8; 32]>>();

    let assignment = Assignment::new(&witness_bytes).unwrap();

    let circuit: Instance = bincode::deserialize(&circuit_bin).unwrap();

    let num_cons = circuit.inst.get_num_cons();
    let num_vars = circuit.inst.get_num_vars();
    let num_inputs = circuit.inst.get_num_inputs();

    // produce public parameters
    // !Needs to be generated by the verifier
    let gens = NIZKGens::new(num_cons, num_vars, num_inputs);

    let public_input = Assignment::new(&public_inputs).unwrap();

    let mut prover_transcript = Transcript::new(b"nizk_example");

    // produce a proof of satisfiability
    let proof = NIZK::prove(
        &circuit,
        assignment,
        &public_input,
        &gens,
        &mut prover_transcript,
    );

    let mut verifier_transcript = Transcript::new(b"nizk_example");

    proof
        .verify(&circuit, &public_input, &mut verifier_transcript, &gens)
        .unwrap();
}
